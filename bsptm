#!/bin/sh
#
# binary space partitioning for tmux panes

# Written in 2016 by Suraj N. Kurapati <https://github.com/sunaku>
# Documented at <https://sunaku.github.io/tmux-layout-dwindle.html>
# and modified

# parse any orientation flags specified among the command-line arguments
spiral_tb=+
spiral_lr=+
modulo_hv=1 is_vertical=true
is_spiral=true


# gather information about the current state of the window and its panes
set -- $(tmux list-panes -F '#{pane_id}')
selected_pane=$(tmux display-message -p '#{pane_id}')
window_height=$(tmux display-message -p '#{window_height}')
historic_pane=$(tmux last-pane 2>/dev/null \;\
    display-message -p '#{pane_id}' \;\
    last-pane) ||: # exit 1 - no last pane

# execute all tmux commands in one shot to avoid flickering and slowness
exec tmux $({
# flatten current layout, stacking all panes vertically like pancakes
echo select-layout even-vertical
# transform pane stack into binary space partitions of dwindling size
count=1
for pane_id; do
    if [ $count -eq $# ]; then
	break # skip last pane because .+1 wraps around to the first pane
    elif [ $(( count % 2 )) -eq $modulo_hv ]; then
	move_h=+
	if $is_spiral && [ $(( count % 5 )) -gt 2 ]
	then move_b=$spiral_lr
	fi
    else
	move_h=
	if $is_spiral && [ $(( count % 5 )) -gt 2 ]
	then move_b=$spiral_tb
	fi
    fi
    echo resize-pane -t $pane_id -y $window_height # make room for move
    echo select-pane -t $pane_id # for relative pane addressing in move
    echo move-pane -d -s .+1 -t . ${move_h:+-h} ${move_b:+-b} # move it
    count=$(( count + 1 ))
done
# divide available space evenly among panes (binary space partitions)
branch_height=$window_height
count=1
for pane_id; do
    if [ $count -eq $# ] && ! $is_vertical; then
	break # skip last pane because it will already be sized correctly
    elif [ $(( count % 2 )) -eq 1 ]; then
	# every other pane is a branch in the binary space partition tree
	parent_height=$branch_height
	branch_height=$(( 62 * branch_height / 100 ))
	if $is_vertical
	then resize_y=$parent_height
	else resize_y=$branch_height
	fi
	echo resize-pane -t $pane_id -y $resize_y
    fi
    count=$(( count + 1 ))
done
# restore pane selection back to how it was before we did any of this
test -n "$historic_pane" && echo select-pane -t $historic_pane
echo select-pane -t $selected_pane
} | sed 's/$/ ;/')
